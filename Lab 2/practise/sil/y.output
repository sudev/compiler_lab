State 1 conflicts: 1 reduce/reduce
State 87 conflicts: 1 shift/reduce


Grammar

    0 $accept: start $end

    1 start: global main

    2 global: DECL declstate ENDDECL

    3 declstate: decle
    4          | /* empty */

    5 decle: INTEGERE ids decle
    6      | BOOLEANE ids decle
    7      | /* empty */

    8 ids: ID idsr
    9    | ID '[' INTEGER ']' idsr

   10 idsr: ',' ids
   11     | ';'

   12 main: INTMAIN maindecl body '}'

   13 maindecl: DECL mainstate ENDDECL

   14 mainstate: INTEGERE mids mainstate
   15          | BOOLEANE mids mainstate
   16          | /* empty */

   17 mids: ID midsr

   18 midsr: ',' mids
   19      | ';'

   20 body: BEGIN statements ret END

   21 statements: assign statements
   22           | cond statements
   23           | itr statements
   24           | ipop statements
   25           | /* empty */

   26 assign: ID '=' INTEGER ';'
   27       | ID '[' INTEGER ']' '=' INTEGER ';'

   28 cond: IF logicalexpr THEN statements optional

   29 optional: ELSE statements ENDIF ';'
   30         | ENDIF ';'

   31 itr: WHILE logicalexpr DO statements ENDWHILE ';'

   32 ipop: READ '(' ID ')' ';'
   33     | READ '(' array ')' ';'
   34     | WRITE '(' arithmeticexpr ')' ';'

   35 array: ID '[' array2 ']'

   36 array2: array1

   37 array1: INTEGER
   38       | ID '[' array1 ']'

   39 logicalexpr: arithmeticexpr LOGICALOPR arithmeticexpr

   40 arithmeticexpr: arithmeticexpr MATHOPR arithmeticexpr
   41               | ID
   42               | ID '[' arithmeticexpr ']'
   43               | INTEGER
   44               | '(' arithmeticexpr ')'

   45 ret: RETURN INTEGER ';'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 32 33 34 44
')' (41) 32 33 34 44
',' (44) 10 18
';' (59) 11 19 26 27 29 30 31 32 33 34 45
'=' (61) 26 27
'[' (91) 9 27 35 38 42
']' (93) 9 27 35 38 42
'}' (125) 12
error (256)
INTMAIN (258) 12
DECL (259) 2 13
ENDDECL (260) 2 13
RETURN (261) 45
INTEGERE (262) 5 14
BOOLEANE (263) 6 15
ID (264) 8 9 17 26 27 32 35 38 41 42
END (265) 20
BEGIN (266) 20
IF (267) 28
ELSE (268) 29
ENDIF (269) 29 30
WHILE (270) 31
DO (271) 31
ENDWHILE (272) 31
THEN (273) 28
INTEGER (274) 9 26 27 37 43 45
READ (275) 32 33
WRITE (276) 34
MATHOPR (277) 40
LOGICALOPR (278) 39


Nonterminals, with rules where they appear

$accept (32)
    on left: 0
start (33)
    on left: 1, on right: 0
global (34)
    on left: 2, on right: 1
declstate (35)
    on left: 3 4, on right: 2
decle (36)
    on left: 5 6 7, on right: 3 5 6
ids (37)
    on left: 8 9, on right: 5 6 10
idsr (38)
    on left: 10 11, on right: 8 9
main (39)
    on left: 12, on right: 1
maindecl (40)
    on left: 13, on right: 12
mainstate (41)
    on left: 14 15 16, on right: 13 14 15
mids (42)
    on left: 17, on right: 14 15 18
midsr (43)
    on left: 18 19, on right: 17
body (44)
    on left: 20, on right: 12
statements (45)
    on left: 21 22 23 24 25, on right: 20 21 22 23 24 28 29 31
assign (46)
    on left: 26 27, on right: 21
cond (47)
    on left: 28, on right: 22
optional (48)
    on left: 29 30, on right: 28
itr (49)
    on left: 31, on right: 23
ipop (50)
    on left: 32 33 34, on right: 24
array (51)
    on left: 35, on right: 33
array2 (52)
    on left: 36, on right: 35
array1 (53)
    on left: 37 38, on right: 36 38
logicalexpr (54)
    on left: 39, on right: 28 31
arithmeticexpr (55)
    on left: 40 41 42 43 44, on right: 34 39 40 42 44
ret (56)
    on left: 45, on right: 20


State 0

    0 $accept: . start $end

    DECL  shift, and go to state 1

    start   go to state 2
    global  go to state 3


State 1

    2 global: DECL . declstate ENDDECL

    INTEGERE  shift, and go to state 4
    BOOLEANE  shift, and go to state 5

    ENDDECL   reduce using rule 4 (declstate)
    ENDDECL   [reduce using rule 7 (decle)]
    $default  reduce using rule 4 (declstate)

    declstate  go to state 6
    decle      go to state 7


State 2

    0 $accept: start . $end

    $end  shift, and go to state 8


State 3

    1 start: global . main

    INTMAIN  shift, and go to state 9

    main  go to state 10


State 4

    5 decle: INTEGERE . ids decle

    ID  shift, and go to state 11

    ids  go to state 12


State 5

    6 decle: BOOLEANE . ids decle

    ID  shift, and go to state 11

    ids  go to state 13


State 6

    2 global: DECL declstate . ENDDECL

    ENDDECL  shift, and go to state 14


State 7

    3 declstate: decle .

    $default  reduce using rule 3 (declstate)


State 8

    0 $accept: start $end .

    $default  accept


State 9

   12 main: INTMAIN . maindecl body '}'

    DECL  shift, and go to state 15

    maindecl  go to state 16


State 10

    1 start: global main .

    $default  reduce using rule 1 (start)


State 11

    8 ids: ID . idsr
    9    | ID . '[' INTEGER ']' idsr

    '['  shift, and go to state 17
    ','  shift, and go to state 18
    ';'  shift, and go to state 19

    idsr  go to state 20


State 12

    5 decle: INTEGERE ids . decle

    INTEGERE  shift, and go to state 4
    BOOLEANE  shift, and go to state 5

    $default  reduce using rule 7 (decle)

    decle  go to state 21


State 13

    6 decle: BOOLEANE ids . decle

    INTEGERE  shift, and go to state 4
    BOOLEANE  shift, and go to state 5

    $default  reduce using rule 7 (decle)

    decle  go to state 22


State 14

    2 global: DECL declstate ENDDECL .

    $default  reduce using rule 2 (global)


State 15

   13 maindecl: DECL . mainstate ENDDECL

    INTEGERE  shift, and go to state 23
    BOOLEANE  shift, and go to state 24

    $default  reduce using rule 16 (mainstate)

    mainstate  go to state 25


State 16

   12 main: INTMAIN maindecl . body '}'

    BEGIN  shift, and go to state 26

    body  go to state 27


State 17

    9 ids: ID '[' . INTEGER ']' idsr

    INTEGER  shift, and go to state 28


State 18

   10 idsr: ',' . ids

    ID  shift, and go to state 11

    ids  go to state 29


State 19

   11 idsr: ';' .

    $default  reduce using rule 11 (idsr)


State 20

    8 ids: ID idsr .

    $default  reduce using rule 8 (ids)


State 21

    5 decle: INTEGERE ids decle .

    $default  reduce using rule 5 (decle)


State 22

    6 decle: BOOLEANE ids decle .

    $default  reduce using rule 6 (decle)


State 23

   14 mainstate: INTEGERE . mids mainstate

    ID  shift, and go to state 30

    mids  go to state 31


State 24

   15 mainstate: BOOLEANE . mids mainstate

    ID  shift, and go to state 30

    mids  go to state 32


State 25

   13 maindecl: DECL mainstate . ENDDECL

    ENDDECL  shift, and go to state 33


State 26

   20 body: BEGIN . statements ret END

    ID     shift, and go to state 34
    IF     shift, and go to state 35
    WHILE  shift, and go to state 36
    READ   shift, and go to state 37
    WRITE  shift, and go to state 38

    $default  reduce using rule 25 (statements)

    statements  go to state 39
    assign      go to state 40
    cond        go to state 41
    itr         go to state 42
    ipop        go to state 43


State 27

   12 main: INTMAIN maindecl body . '}'

    '}'  shift, and go to state 44


State 28

    9 ids: ID '[' INTEGER . ']' idsr

    ']'  shift, and go to state 45


State 29

   10 idsr: ',' ids .

    $default  reduce using rule 10 (idsr)


State 30

   17 mids: ID . midsr

    ','  shift, and go to state 46
    ';'  shift, and go to state 47

    midsr  go to state 48


State 31

   14 mainstate: INTEGERE mids . mainstate

    INTEGERE  shift, and go to state 23
    BOOLEANE  shift, and go to state 24

    $default  reduce using rule 16 (mainstate)

    mainstate  go to state 49


State 32

   15 mainstate: BOOLEANE mids . mainstate

    INTEGERE  shift, and go to state 23
    BOOLEANE  shift, and go to state 24

    $default  reduce using rule 16 (mainstate)

    mainstate  go to state 50


State 33

   13 maindecl: DECL mainstate ENDDECL .

    $default  reduce using rule 13 (maindecl)


State 34

   26 assign: ID . '=' INTEGER ';'
   27       | ID . '[' INTEGER ']' '=' INTEGER ';'

    '['  shift, and go to state 51
    '='  shift, and go to state 52


State 35

   28 cond: IF . logicalexpr THEN statements optional

    ID       shift, and go to state 53
    INTEGER  shift, and go to state 54
    '('      shift, and go to state 55

    logicalexpr     go to state 56
    arithmeticexpr  go to state 57


State 36

   31 itr: WHILE . logicalexpr DO statements ENDWHILE ';'

    ID       shift, and go to state 53
    INTEGER  shift, and go to state 54
    '('      shift, and go to state 55

    logicalexpr     go to state 58
    arithmeticexpr  go to state 57


State 37

   32 ipop: READ . '(' ID ')' ';'
   33     | READ . '(' array ')' ';'

    '('  shift, and go to state 59


State 38

   34 ipop: WRITE . '(' arithmeticexpr ')' ';'

    '('  shift, and go to state 60


State 39

   20 body: BEGIN statements . ret END

    RETURN  shift, and go to state 61

    ret  go to state 62


State 40

   21 statements: assign . statements

    ID     shift, and go to state 34
    IF     shift, and go to state 35
    WHILE  shift, and go to state 36
    READ   shift, and go to state 37
    WRITE  shift, and go to state 38

    $default  reduce using rule 25 (statements)

    statements  go to state 63
    assign      go to state 40
    cond        go to state 41
    itr         go to state 42
    ipop        go to state 43


State 41

   22 statements: cond . statements

    ID     shift, and go to state 34
    IF     shift, and go to state 35
    WHILE  shift, and go to state 36
    READ   shift, and go to state 37
    WRITE  shift, and go to state 38

    $default  reduce using rule 25 (statements)

    statements  go to state 64
    assign      go to state 40
    cond        go to state 41
    itr         go to state 42
    ipop        go to state 43


State 42

   23 statements: itr . statements

    ID     shift, and go to state 34
    IF     shift, and go to state 35
    WHILE  shift, and go to state 36
    READ   shift, and go to state 37
    WRITE  shift, and go to state 38

    $default  reduce using rule 25 (statements)

    statements  go to state 65
    assign      go to state 40
    cond        go to state 41
    itr         go to state 42
    ipop        go to state 43


State 43

   24 statements: ipop . statements

    ID     shift, and go to state 34
    IF     shift, and go to state 35
    WHILE  shift, and go to state 36
    READ   shift, and go to state 37
    WRITE  shift, and go to state 38

    $default  reduce using rule 25 (statements)

    statements  go to state 66
    assign      go to state 40
    cond        go to state 41
    itr         go to state 42
    ipop        go to state 43


State 44

   12 main: INTMAIN maindecl body '}' .

    $default  reduce using rule 12 (main)


State 45

    9 ids: ID '[' INTEGER ']' . idsr

    ','  shift, and go to state 18
    ';'  shift, and go to state 19

    idsr  go to state 67


State 46

   18 midsr: ',' . mids

    ID  shift, and go to state 30

    mids  go to state 68


State 47

   19 midsr: ';' .

    $default  reduce using rule 19 (midsr)


State 48

   17 mids: ID midsr .

    $default  reduce using rule 17 (mids)


State 49

   14 mainstate: INTEGERE mids mainstate .

    $default  reduce using rule 14 (mainstate)


State 50

   15 mainstate: BOOLEANE mids mainstate .

    $default  reduce using rule 15 (mainstate)


State 51

   27 assign: ID '[' . INTEGER ']' '=' INTEGER ';'

    INTEGER  shift, and go to state 69


State 52

   26 assign: ID '=' . INTEGER ';'

    INTEGER  shift, and go to state 70


State 53

   41 arithmeticexpr: ID .
   42               | ID . '[' arithmeticexpr ']'

    '['  shift, and go to state 71

    $default  reduce using rule 41 (arithmeticexpr)


State 54

   43 arithmeticexpr: INTEGER .

    $default  reduce using rule 43 (arithmeticexpr)


State 55

   44 arithmeticexpr: '(' . arithmeticexpr ')'

    ID       shift, and go to state 53
    INTEGER  shift, and go to state 54
    '('      shift, and go to state 55

    arithmeticexpr  go to state 72


State 56

   28 cond: IF logicalexpr . THEN statements optional

    THEN  shift, and go to state 73


State 57

   39 logicalexpr: arithmeticexpr . LOGICALOPR arithmeticexpr
   40 arithmeticexpr: arithmeticexpr . MATHOPR arithmeticexpr

    MATHOPR     shift, and go to state 74
    LOGICALOPR  shift, and go to state 75


State 58

   31 itr: WHILE logicalexpr . DO statements ENDWHILE ';'

    DO  shift, and go to state 76


State 59

   32 ipop: READ '(' . ID ')' ';'
   33     | READ '(' . array ')' ';'

    ID  shift, and go to state 77

    array  go to state 78


State 60

   34 ipop: WRITE '(' . arithmeticexpr ')' ';'

    ID       shift, and go to state 53
    INTEGER  shift, and go to state 54
    '('      shift, and go to state 55

    arithmeticexpr  go to state 79


State 61

   45 ret: RETURN . INTEGER ';'

    INTEGER  shift, and go to state 80


State 62

   20 body: BEGIN statements ret . END

    END  shift, and go to state 81


State 63

   21 statements: assign statements .

    $default  reduce using rule 21 (statements)


State 64

   22 statements: cond statements .

    $default  reduce using rule 22 (statements)


State 65

   23 statements: itr statements .

    $default  reduce using rule 23 (statements)


State 66

   24 statements: ipop statements .

    $default  reduce using rule 24 (statements)


State 67

    9 ids: ID '[' INTEGER ']' idsr .

    $default  reduce using rule 9 (ids)


State 68

   18 midsr: ',' mids .

    $default  reduce using rule 18 (midsr)


State 69

   27 assign: ID '[' INTEGER . ']' '=' INTEGER ';'

    ']'  shift, and go to state 82


State 70

   26 assign: ID '=' INTEGER . ';'

    ';'  shift, and go to state 83


State 71

   42 arithmeticexpr: ID '[' . arithmeticexpr ']'

    ID       shift, and go to state 53
    INTEGER  shift, and go to state 54
    '('      shift, and go to state 55

    arithmeticexpr  go to state 84


State 72

   40 arithmeticexpr: arithmeticexpr . MATHOPR arithmeticexpr
   44               | '(' arithmeticexpr . ')'

    MATHOPR  shift, and go to state 74
    ')'      shift, and go to state 85


State 73

   28 cond: IF logicalexpr THEN . statements optional

    ID     shift, and go to state 34
    IF     shift, and go to state 35
    WHILE  shift, and go to state 36
    READ   shift, and go to state 37
    WRITE  shift, and go to state 38

    $default  reduce using rule 25 (statements)

    statements  go to state 86
    assign      go to state 40
    cond        go to state 41
    itr         go to state 42
    ipop        go to state 43


State 74

   40 arithmeticexpr: arithmeticexpr MATHOPR . arithmeticexpr

    ID       shift, and go to state 53
    INTEGER  shift, and go to state 54
    '('      shift, and go to state 55

    arithmeticexpr  go to state 87


State 75

   39 logicalexpr: arithmeticexpr LOGICALOPR . arithmeticexpr

    ID       shift, and go to state 53
    INTEGER  shift, and go to state 54
    '('      shift, and go to state 55

    arithmeticexpr  go to state 88


State 76

   31 itr: WHILE logicalexpr DO . statements ENDWHILE ';'

    ID     shift, and go to state 34
    IF     shift, and go to state 35
    WHILE  shift, and go to state 36
    READ   shift, and go to state 37
    WRITE  shift, and go to state 38

    $default  reduce using rule 25 (statements)

    statements  go to state 89
    assign      go to state 40
    cond        go to state 41
    itr         go to state 42
    ipop        go to state 43


State 77

   32 ipop: READ '(' ID . ')' ';'
   35 array: ID . '[' array2 ']'

    '['  shift, and go to state 90
    ')'  shift, and go to state 91


State 78

   33 ipop: READ '(' array . ')' ';'

    ')'  shift, and go to state 92


State 79

   34 ipop: WRITE '(' arithmeticexpr . ')' ';'
   40 arithmeticexpr: arithmeticexpr . MATHOPR arithmeticexpr

    MATHOPR  shift, and go to state 74
    ')'      shift, and go to state 93


State 80

   45 ret: RETURN INTEGER . ';'

    ';'  shift, and go to state 94


State 81

   20 body: BEGIN statements ret END .

    $default  reduce using rule 20 (body)


State 82

   27 assign: ID '[' INTEGER ']' . '=' INTEGER ';'

    '='  shift, and go to state 95


State 83

   26 assign: ID '=' INTEGER ';' .

    $default  reduce using rule 26 (assign)


State 84

   40 arithmeticexpr: arithmeticexpr . MATHOPR arithmeticexpr
   42               | ID '[' arithmeticexpr . ']'

    MATHOPR  shift, and go to state 74
    ']'      shift, and go to state 96


State 85

   44 arithmeticexpr: '(' arithmeticexpr ')' .

    $default  reduce using rule 44 (arithmeticexpr)


State 86

   28 cond: IF logicalexpr THEN statements . optional

    ELSE   shift, and go to state 97
    ENDIF  shift, and go to state 98

    optional  go to state 99


State 87

   40 arithmeticexpr: arithmeticexpr . MATHOPR arithmeticexpr
   40               | arithmeticexpr MATHOPR arithmeticexpr .

    MATHOPR  shift, and go to state 74

    MATHOPR   [reduce using rule 40 (arithmeticexpr)]
    $default  reduce using rule 40 (arithmeticexpr)


State 88

   39 logicalexpr: arithmeticexpr LOGICALOPR arithmeticexpr .
   40 arithmeticexpr: arithmeticexpr . MATHOPR arithmeticexpr

    MATHOPR  shift, and go to state 74

    $default  reduce using rule 39 (logicalexpr)


State 89

   31 itr: WHILE logicalexpr DO statements . ENDWHILE ';'

    ENDWHILE  shift, and go to state 100


State 90

   35 array: ID '[' . array2 ']'

    ID       shift, and go to state 101
    INTEGER  shift, and go to state 102

    array2  go to state 103
    array1  go to state 104


State 91

   32 ipop: READ '(' ID ')' . ';'

    ';'  shift, and go to state 105


State 92

   33 ipop: READ '(' array ')' . ';'

    ';'  shift, and go to state 106


State 93

   34 ipop: WRITE '(' arithmeticexpr ')' . ';'

    ';'  shift, and go to state 107


State 94

   45 ret: RETURN INTEGER ';' .

    $default  reduce using rule 45 (ret)


State 95

   27 assign: ID '[' INTEGER ']' '=' . INTEGER ';'

    INTEGER  shift, and go to state 108


State 96

   42 arithmeticexpr: ID '[' arithmeticexpr ']' .

    $default  reduce using rule 42 (arithmeticexpr)


State 97

   29 optional: ELSE . statements ENDIF ';'

    ID     shift, and go to state 34
    IF     shift, and go to state 35
    WHILE  shift, and go to state 36
    READ   shift, and go to state 37
    WRITE  shift, and go to state 38

    $default  reduce using rule 25 (statements)

    statements  go to state 109
    assign      go to state 40
    cond        go to state 41
    itr         go to state 42
    ipop        go to state 43


State 98

   30 optional: ENDIF . ';'

    ';'  shift, and go to state 110


State 99

   28 cond: IF logicalexpr THEN statements optional .

    $default  reduce using rule 28 (cond)


State 100

   31 itr: WHILE logicalexpr DO statements ENDWHILE . ';'

    ';'  shift, and go to state 111


State 101

   38 array1: ID . '[' array1 ']'

    '['  shift, and go to state 112


State 102

   37 array1: INTEGER .

    $default  reduce using rule 37 (array1)


State 103

   35 array: ID '[' array2 . ']'

    ']'  shift, and go to state 113


State 104

   36 array2: array1 .

    $default  reduce using rule 36 (array2)


State 105

   32 ipop: READ '(' ID ')' ';' .

    $default  reduce using rule 32 (ipop)


State 106

   33 ipop: READ '(' array ')' ';' .

    $default  reduce using rule 33 (ipop)


State 107

   34 ipop: WRITE '(' arithmeticexpr ')' ';' .

    $default  reduce using rule 34 (ipop)


State 108

   27 assign: ID '[' INTEGER ']' '=' INTEGER . ';'

    ';'  shift, and go to state 114


State 109

   29 optional: ELSE statements . ENDIF ';'

    ENDIF  shift, and go to state 115


State 110

   30 optional: ENDIF ';' .

    $default  reduce using rule 30 (optional)


State 111

   31 itr: WHILE logicalexpr DO statements ENDWHILE ';' .

    $default  reduce using rule 31 (itr)


State 112

   38 array1: ID '[' . array1 ']'

    ID       shift, and go to state 101
    INTEGER  shift, and go to state 102

    array1  go to state 116


State 113

   35 array: ID '[' array2 ']' .

    $default  reduce using rule 35 (array)


State 114

   27 assign: ID '[' INTEGER ']' '=' INTEGER ';' .

    $default  reduce using rule 27 (assign)


State 115

   29 optional: ELSE statements ENDIF . ';'

    ';'  shift, and go to state 117


State 116

   38 array1: ID '[' array1 . ']'

    ']'  shift, and go to state 118


State 117

   29 optional: ELSE statements ENDIF ';' .

    $default  reduce using rule 29 (optional)


State 118

   38 array1: ID '[' array1 ']' .

    $default  reduce using rule 38 (array1)
